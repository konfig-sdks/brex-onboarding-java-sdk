/*
 * Onboarding API
 *  The onboarding API allows you to refer your customers and personal contacts to Brex. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developer-access@brex.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Applicant;
import com.konfigthis.client.model.ContactPreference;
import com.konfigthis.client.model.CreateDocumentRequest;
import com.konfigthis.client.model.CreateReferralRequest;
import com.konfigthis.client.model.CreateReferralRequestBusiness;
import com.konfigthis.client.model.Document;
import com.konfigthis.client.model.DocumentType;
import com.konfigthis.client.model.Referral;
import com.konfigthis.client.model.ReferralPage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ReferralsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReferralsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ReferralsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewReferralCall(CreateReferralRequest createReferralRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createReferralRequest;

        // create path and map variables
        String localVarPath = "/v1/referrals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2ClientCredentials" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewReferralValidateBeforeCall(CreateReferralRequest createReferralRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createReferralRequest' is set
        if (createReferralRequest == null) {
            throw new ApiException("Missing the required parameter 'createReferralRequest' when calling createNewReferral(Async)");
        }

        return createNewReferralCall(createReferralRequest, _callback);

    }


    private ApiResponse<Referral> createNewReferralWithHttpInfo(CreateReferralRequest createReferralRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewReferralValidateBeforeCall(createReferralRequest, null);
        Type localVarReturnType = new TypeToken<Referral>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewReferralAsync(CreateReferralRequest createReferralRequest, final ApiCallback<Referral> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewReferralValidateBeforeCall(createReferralRequest, _callback);
        Type localVarReturnType = new TypeToken<Referral>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewReferralRequestBuilder {
        private final String referralCode;
        private final Applicant applicant;
        private CreateReferralRequestBusiness business;
        private ContactPreference contactPreference;

        private CreateNewReferralRequestBuilder(String referralCode, Applicant applicant) {
            this.referralCode = referralCode;
            this.applicant = applicant;
        }

        /**
         * Set business
         * @param business  (optional)
         * @return CreateNewReferralRequestBuilder
         */
        public CreateNewReferralRequestBuilder business(CreateReferralRequestBusiness business) {
            this.business = business;
            return this;
        }
        
        /**
         * Set contactPreference
         * @param contactPreference  (optional)
         * @return CreateNewReferralRequestBuilder
         */
        public CreateNewReferralRequestBuilder contactPreference(ContactPreference contactPreference) {
            this.contactPreference = contactPreference;
            return this;
        }
        
        /**
         * Build call for createNewReferral
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> createReferralRequest 200 response </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateReferralRequest createReferralRequest = buildBodyParams();
            return createNewReferralCall(createReferralRequest, _callback);
        }

        private CreateReferralRequest buildBodyParams() {
            CreateReferralRequest createReferralRequest = new CreateReferralRequest();
            createReferralRequest.referralCode(this.referralCode);
            createReferralRequest.applicant(this.applicant);
            createReferralRequest.business(this.business);
            createReferralRequest.contactPreference(this.contactPreference);
            return createReferralRequest;
        }

        /**
         * Execute createNewReferral request
         * @return Referral
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> createReferralRequest 200 response </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public Referral execute() throws ApiException {
            CreateReferralRequest createReferralRequest = buildBodyParams();
            ApiResponse<Referral> localVarResp = createNewReferralWithHttpInfo(createReferralRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewReferral request with HTTP info returned
         * @return ApiResponse&lt;Referral&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> createReferralRequest 200 response </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Referral> executeWithHttpInfo() throws ApiException {
            CreateReferralRequest createReferralRequest = buildBodyParams();
            return createNewReferralWithHttpInfo(createReferralRequest);
        }

        /**
         * Execute createNewReferral request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> createReferralRequest 200 response </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Referral> _callback) throws ApiException {
            CreateReferralRequest createReferralRequest = buildBodyParams();
            return createNewReferralAsync(createReferralRequest, _callback);
        }
    }

    /**
     * Creates a referral
     * This creates new referrals. The response will contain an identifier and a unique personalized link to an application flow. Many fields are optional and when they&#39;re provided they&#39;ll prefill the application flow for Brex.  You should handle and store these references securely as they contain sensitive information about the referral.
     * @param createReferralRequest  (required)
     * @return CreateNewReferralRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createReferralRequest 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewReferralRequestBuilder createNewReferral(String referralCode, Applicant applicant) throws IllegalArgumentException {
        if (referralCode == null) throw new IllegalArgumentException("\"referralCode\" is required but got null");
            

        if (applicant == null) throw new IllegalArgumentException("\"applicant\" is required but got null");
        return new CreateNewReferralRequestBuilder(referralCode, applicant);
    }
    private okhttp3.Call getByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/referrals/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2ClientCredentials" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getById(Async)");
        }

        return getByIdCall(id, _callback);

    }


    private ApiResponse<Referral> getByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Referral>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String id, final ApiCallback<Referral> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Referral>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String id;

        private GetByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getReferral 200 response </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Referral not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(id, _callback);
        }


        /**
         * Execute getById request
         * @return Referral
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getReferral 200 response </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Referral not found </td><td>  -  </td></tr>
         </table>
         */
        public Referral execute() throws ApiException {
            ApiResponse<Referral> localVarResp = getByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Referral&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getReferral 200 response </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Referral not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Referral> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(id);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getReferral 200 response </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Referral not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Referral> _callback) throws ApiException {
            return getByIdAsync(id, _callback);
        }
    }

    /**
     * Gets a referral by ID
     * Returns a referral object by ID if it exists.
     * @param id  (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getReferral 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Referral not found </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetByIdRequestBuilder(id);
    }
    private okhttp3.Call getListCall(String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/referrals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2ClientCredentials" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListValidateBeforeCall(String cursor, final ApiCallback _callback) throws ApiException {
        return getListCall(cursor, _callback);

    }


    private ApiResponse<ReferralPage> getListWithHttpInfo(String cursor) throws ApiException {
        okhttp3.Call localVarCall = getListValidateBeforeCall(cursor, null);
        Type localVarReturnType = new TypeToken<ReferralPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListAsync(String cursor, final ApiCallback<ReferralPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListValidateBeforeCall(cursor, _callback);
        Type localVarReturnType = new TypeToken<ReferralPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListRequestBuilder {
        private String cursor;

        private GetListRequestBuilder() {
        }

        /**
         * Set cursor
         * @param cursor  (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Build call for getList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> listReferrals 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid cursor </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListCall(cursor, _callback);
        }


        /**
         * Execute getList request
         * @return ReferralPage
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> listReferrals 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid cursor </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public ReferralPage execute() throws ApiException {
            ApiResponse<ReferralPage> localVarResp = getListWithHttpInfo(cursor);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getList request with HTTP info returned
         * @return ApiResponse&lt;ReferralPage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> listReferrals 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid cursor </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReferralPage> executeWithHttpInfo() throws ApiException {
            return getListWithHttpInfo(cursor);
        }

        /**
         * Execute getList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> listReferrals 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid cursor </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReferralPage> _callback) throws ApiException {
            return getListAsync(cursor, _callback);
        }
    }

    /**
     * List referrals
     * Returns referrals created. *Note*: This doesn&#39;t include referrals that have expired. 
     * @return GetListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listReferrals 200 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid cursor </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public GetListRequestBuilder getList() throws IllegalArgumentException {
        return new GetListRequestBuilder();
    }
    private okhttp3.Call uploadDocumentCall(String id, CreateDocumentRequest createDocumentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDocumentRequest;

        // create path and map variables
        String localVarPath = "/v1/referrals/{id}/document_upload"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2ClientCredentials" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadDocumentValidateBeforeCall(String id, CreateDocumentRequest createDocumentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling uploadDocument(Async)");
        }

        // verify the required parameter 'createDocumentRequest' is set
        if (createDocumentRequest == null) {
            throw new ApiException("Missing the required parameter 'createDocumentRequest' when calling uploadDocument(Async)");
        }

        return uploadDocumentCall(id, createDocumentRequest, _callback);

    }


    private ApiResponse<Document> uploadDocumentWithHttpInfo(String id, CreateDocumentRequest createDocumentRequest) throws ApiException {
        okhttp3.Call localVarCall = uploadDocumentValidateBeforeCall(id, createDocumentRequest, null);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call uploadDocumentAsync(String id, CreateDocumentRequest createDocumentRequest, final ApiCallback<Document> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadDocumentValidateBeforeCall(id, createDocumentRequest, _callback);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UploadDocumentRequestBuilder {
        private final DocumentType type;
        private final String id;

        private UploadDocumentRequestBuilder(DocumentType type, String id) {
            this.type = type;
            this.id = id;
        }

        /**
         * Build call for uploadDocument
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> createDocument 200 response </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Referral not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateDocumentRequest createDocumentRequest = buildBodyParams();
            return uploadDocumentCall(id, createDocumentRequest, _callback);
        }

        private CreateDocumentRequest buildBodyParams() {
            CreateDocumentRequest createDocumentRequest = new CreateDocumentRequest();
            createDocumentRequest.type(this.type);
            return createDocumentRequest;
        }

        /**
         * Execute uploadDocument request
         * @return Document
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> createDocument 200 response </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Referral not found </td><td>  -  </td></tr>
         </table>
         */
        public Document execute() throws ApiException {
            CreateDocumentRequest createDocumentRequest = buildBodyParams();
            ApiResponse<Document> localVarResp = uploadDocumentWithHttpInfo(id, createDocumentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute uploadDocument request with HTTP info returned
         * @return ApiResponse&lt;Document&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> createDocument 200 response </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Referral not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Document> executeWithHttpInfo() throws ApiException {
            CreateDocumentRequest createDocumentRequest = buildBodyParams();
            return uploadDocumentWithHttpInfo(id, createDocumentRequest);
        }

        /**
         * Execute uploadDocument request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> createDocument 200 response </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Referral not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Document> _callback) throws ApiException {
            CreateDocumentRequest createDocumentRequest = buildBodyParams();
            return uploadDocumentAsync(id, createDocumentRequest, _callback);
        }
    }

    /**
     * Create a new document upload
     *  The &#x60;uri&#x60; will be a presigned S3 URL allowing you to upload the referral doc securely. This URL can only be used for a &#x60;PUT&#x60; operation and expires 30 minutes after its creation. Once your upload is complete, we will use this to prefill the application.  Refer to these [docs](https://docs.aws.amazon.com/AmazonS3/latest/dev/PresignedUrlUploadObject.html) on how to upload to this presigned S3 URL. We highly recommend using one of AWS SDKs if they&#39;re available for your language to upload these files. 
     * @param id  (required)
     * @param createDocumentRequest  (required)
     * @return UploadDocumentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createDocument 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Referral not found </td><td>  -  </td></tr>
     </table>
     */
    public UploadDocumentRequestBuilder uploadDocument(DocumentType type, String id) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UploadDocumentRequestBuilder(type, id);
    }
}
