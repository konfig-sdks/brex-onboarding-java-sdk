/*
 * Onboarding API
 *  The onboarding API allows you to refer your customers and personal contacts to Brex. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developer-access@brex.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * When using &#x60;CONTROL&#x60; prong, the beneficial owner is a single individual with  significant responsibility to control, manage, or direct a legal entity customer. This includes, an executive officer or senior manager (Chief Executive Officer, Chief Financial Officer, Chief Operating Officer, President), or any other individual who regularly performs similar functions.   Under the &#x60;OWNERSHIP&#x60; prong, a beneficial owner is each individual, if any, who, directly or indirectly, through any contract, arrangement, understanding, relationship or otherwise, owns 25 percent or more of the equity interests of a legal entity customer. If a trust owns directly or indirectly, through any contract, arrangement, understanding, relationship or otherwise, 25 percent or more of the equity interests of a legal entity customer, the beneficial owner is the trustee.  Under the &#x60;BOTH&#x60; prong, the beneficial owner represents both. 
 */
@JsonAdapter(Prong.Adapter.class)public enum Prong {
  
  OWNERSHIP("OWNERSHIP"),
  
  CONTROL("CONTROL"),
  
  BOTH("BOTH");

  private String value;

  Prong(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static Prong fromValue(String value) {
    for (Prong b : Prong.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<Prong> {
    @Override
    public void write(final JsonWriter jsonWriter, final Prong enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public Prong read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return Prong.fromValue(value);
    }
  }
}

